generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Making User Database
model User {
  id                     String    @id @unique
  email                  String    @unique
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  File                   File[]
  Message                Message[]
}

//Making File schema for storing files
model File {
  id           String       @id @default(cuid())
  name         String
  uploadStatus uploadStatus @default(PENDING)
  url          String
  key          String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  Message Message[]

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

enum uploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

//Schema for messages and responses for interacting with Pdf
model Message {
  id      String @id @default(cuid())
  content String @db.Text()
  role    Role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  File      File?    @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    String?
}

enum Role {
  ASSISTANT
  USER
}
